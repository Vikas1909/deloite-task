
*******premium customer class 

	//To Trainees
	@Override
	public int identifyBasicCost() {
		int cost = 0;
		
        //Implement your logic her
        if(getNoOfDays() > 0){
            if(reqSubscriptionType.equals("Annually")){
                cost = 30 * getNoOfDays();
            }
            else if(reqSubscriptionType.equals("Semi-Annually")){
                cost = 45 * getNoOfDays();
            }
            else if(reqSubscriptionType.equals("Quaterly")){
                cost = 50 * getNoOfDays();
            }
            else{
                cost = -1;
            }
        }
        else{
            cost = -1;
        }
		
		return cost;
		
	}
	

***********
abstract class customer 

***
public void generateCustomerId() {
		
        //Implement your logic here
        setCustomerId(custName.substring(0,1).toUpperCase() + ++counter);
		
	}

	//To Trainees
	public Boolean validateCustomerDetails() {
        //Implement your logic here
        
        if(this.custEmailId.endsWith(".com") && (this.custLocation.equals("Bangalore") || this.custLocation.equals("Hyderabad"))){
            return true;
        }
		//Change the return statement accordingly
        return false;
	}


*************laundry method 

public void calculateTotalAmount() {
		
        //Implement your logic her
        int cost = 0;
        int index = 0;
        int weight = 0;
        int weight3 = 0;
        int price = 0;
        double amount = 0.0;
        cost = preCustomer.identifyBasicCost();
        if(validateDate() && preCustomer.validateCustomerDetails() && cost != -1){
            if(preCustomer.getCustType() == 'P'){
                index = 0;
            }
            else{
                index = 1;
            }

            for(int i = 0 ; i < preCustomer.getReqServicesArr().length ; i++){
                for(int j = 0 ; j < availableServicesArr[0].length ; j++){
                    if(preCustomer.getReqServicesArr()[i].equalsIgnoreCase(availableServicesArr[0][j])){
                        weight = preCustomer.getReqWeightArr()[i];
                        weight3 = availableWeightArr[0][j];
                        if(weight <= weight3){
                            price = availableWeightArr[1][j];
                            amount = weight * price;
                            break;
                        }
                        if(index == 1){
                            amount *= 2;
                        }
                        amount += cost;
                        if(amount > 100000){
                            amount = amount * 0.95;
                        }
                        amount = amount * 1.18;
                        totalAmount = amount;
                        preCustomer.setCreditPoints((float)totalAmount * 0.10f);
                        preCustomer.generateCustomerId();
                    }
                    else{
                        totalAmount = -1.0;
                        preCustomer.setCreditPoints(-1.0f);
                        preCustomer.setCustomerId("NA");
                    }
                }
            }
        }
        else{
            totalAmount = -1.0;
            preCustomer.setCreditPoints(-1.0f);
            preCustomer.setCustomerId("NA");
        }
		
	}
